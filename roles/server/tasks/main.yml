---

- name: Install ambari-server
  package:
    state: present
    update_cache: yes
    name: ambari-server
  notify: systemd daemon-reload

- meta: flush_handlers

- block:
  - name: Install {{ database }} required packages
    package:
      name: "{{ item }}"
      update_cache: yes
      state: present
    with_items: "{{ lookup('vars', database + '_packages') | join(',') }}"

- block:
  - name: Load the Ambari Server schema (postgres)
    postgresql_db:
      name: "{{ database_options.ambari_db_name }}"
      maintenance_db: "{{ database_options.ambari_db_name }}"
      login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
      port: "{{ postgres_port }}"
      login_user: "{{ database_options.ambari_db_username }}"
      login_password: "{{ database_options.ambari_db_password }}"
      state: restore
      target: /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql
    register: import_results
  when: database == "postgres"

- block:
  - name: Load the Ambari Server schema (mysql)
    mysql_db:
      name: "{{ database_options.ambari_db_name }}"
      login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
      login_port: "{{ mysql_port }}"
      login_user: "{{ database_options.ambari_db_username }}"
      login_password: "{{ database_options.ambari_db_password }}"
      state: import
      target: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
    register: import_results
    ignore_errors: true

  - name: Fail if the mysql schema could not be loaded
    fail:
      msg: Schema could not be loaded. Error is {{ import_results.msg }}!
    when: import_results is failed and not import_results.msg is search("Table .* already exists")

  when: database == "mysql" or database == "mariadb"

- name: Configure the Ambari JDBC driver
  shell: /usr/sbin/ambari-server setup --jdbc-db={{ database | regex_replace('mariadb', 'mysql') }} --jdbc-driver={{ lookup('vars', database + '_jdbc_location') }}
  notify: Restart ambari-server
  when: import_results.changed | bool

- name: Set the Ambari Server database setup options
  set_fact:
    ambari_database_options: "--database={{ database | regex_replace('mariadb', 'mysql') }} \
                              --databasehost={{ database_options.external_hostname|default(ansible_fqdn,true) }} \
                              --databaseport={{ lookup('vars', database | regex_replace('mariadb', 'mysql') + '_port') }} \
                              --databasename={{ database_options.ambari_db_name }} \
                              --databaseusername={{ database_options.ambari_db_username }} \
                              --databasepassword={{ database_options.ambari_db_password }}"

- name: Set the Ambari Server Java setup option
  set_fact:
    ambari_java_options: "-j {{ java_path }}"

- name: Run Ambari Server setup
  shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
  notify: Restart ambari-server
  when: import_results.changed | bool

- name: Run Ambari Server setup security https
  shell: /usr/sbin/ambari-server setup-security \
    --security-option=setup-https \
    --api-ssl=true --api-ssl-port={{ ambari_port }} \
    --import-cert-path={{ ambari_cert }} \
    --import-key-path={{ ambari_pkey }}  \
    --pem-password={{ ambari_pkey_password }}
  notify: Restart ambari-server
  when:  ambari_https | bool

- name: Update ambari properties with custom properties
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    state: present
    line: "{{ item }}"
  with_items: "{{ ambari_properties }}"
  notify: Restart ambari-server

- name: Configure logs path if asked
  include: logs.yml
  when: config_logs | bool

- meta: flush_handlers

- name: Make sure the ambari-server service is started and enabled
  service:
    name: ambari-server
    state: started
    enabled: yes

...
